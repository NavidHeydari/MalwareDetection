# -*- coding: utf-8 -*-
"""
Created on Sun Feb 24 09:33:20 2019

@author: Navid Heydari
"""
import sys
import numpy as np
import matplotlib.pyplot as plt
from sklearn import preprocessing 
import pandas as pd

from sklearn.datasets import make_classification
from sklearn.ensemble import ExtraTreesClassifier

dtypes = {
               'MachineIdentifier':                                     'category', # Not Required in Classification
               'ProductName':                                           'object', 
                'EngineVersion':                                        'object', 
                'AppVersion':                                           'object', 
                'AvSigVersion':                                         'object', 
                'IsBeta':                                               'float16', 
                'RtpStateBitfield':                                     'float64',
                'IsSxsPassiveMode':                                     'float16',
                'DefaultBrowsersIdentifier':                            'float64',
                'AVProductStatesIdentifier':                            'float64',
                'AVProductsInstalled':                                  'float64',
                'AVProductsEnabled':                                    'float64',
                'HasTpm':                                               'float64',
                'CountryIdentifier':                                    'float64',
                'CityIdentifier':                                       'float64',
                'OrganizationIdentifier':                               'float64',
                'GeoNameIdentifier':                                    'float64',
                'LocaleEnglishNameIdentifier':                          'float64',
                'Platform':                                             'object',
                'Processor':                                            'object',
                'OsVer':                                                'object',
                'OsBuild':                                              'float64',
                'OsSuite':                                              'float64',
                'OsPlatformSubRelease':                                 'object',
                'OsBuildLab':                                           'object',
                'SkuEdition':                                           'object',
                'IsProtected':                                          'float16',
                'AutoSampleOptIn':                                      'float64',
                'PuaMode':                                              'object',
                'SMode':                                                'float64',
                'IeVerIdentifier':                                      'float64',
                'SmartScreen':                                          'object',
                'Firewall':                                             'float64',
                'UacLuaenable':                                         'float64',
                'Census_MDC2FormFactor':                                'object',
                'Census_DeviceFamily':                                  'object',
                'Census_OEMNameIdentifier':                             'float64',
                'Census_OEMModelIdentifier':                            'float64',
                'Census_ProcessorCoreCount':                            'float64',
                'Census_ProcessorManufacturerIdentifier':               'float64',
                'Census_ProcessorModelIdentifier':                      'float64',
                'Census_ProcessorClass':                                'object',
                'Census_PrimaryDiskTotalCapacity':                      'float64',
                'Census_PrimaryDiskTypeName':                           'object',
                'Census_SystemVolumeTotalCapacity':                     'float64',
                'Census_HasOpticalDiskDrive':                           'float64',
                'Census_TotalPhysicalRAM':                              'float64',
                'Census_ChassisTypeName':                               'object',
                'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float64',
                'Census_InternalPrimaryDisplayResolutionHorizontal':    'float64',
                'Census_InternalPrimaryDisplayResolutionVertical':      'float64',
                'Census_PowerPlatformRoleName':                         'object',
                'Census_InternalBatteryType':                           'object',
                'Census_InternalBatteryNumberOfCharges':                'float64',
                'Census_OSVersion':                                     'object',
                'Census_OSArchitecture':                                'object',
                'Census_OSBranch':                                      'object',
                'Census_OSBuildNumber':                                 'float64',
                'Census_OSBuildRevision':                               'float64',
                'Census_OSEdition':                                     'object',
                'Census_OSSkuName':                                     'object',
                'Census_OSInstallTypeName':                             'object',
                'Census_OSInstallLanguageIdentifier':                   'float64',
                'Census_OSUILocaleIdentifier':                          'float64',
                'Census_OSWUAutoUpdateOptionsName':                     'object',
                'Census_IsPortableOperatingSystem':                     'float16',
                'Census_GenuineStateName':                              'object',
                'Census_ActivationChannel':                             'object',
                'Census_IsFlightingInternal':                           'float16',
                'Census_IsFlightsDisabled':                             'float16',
                'Census_FlightRing':                                    'object',
                'Census_ThresholdOptIn':                                'float64',
                'Census_FirmwareManufacturerIdentifier':                'float64',
                'Census_FirmwareVersionIdentifier':                     'float64',
                'Census_IsSecureBootEnabled':                           'float16',
                'Census_IsWIMBootEnabled':                              'float16',
                'Census_IsVirtualDevice':                               'float16',
                'Census_IsTouchEnabled':                                'float16',
                'Census_IsPenCapable':                                  'float16',
                'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
                'Wdft_IsGamer':                                         'float64',
                'Wdft_RegionIdentifier':                                'float64',
               #fill in the data types for the rest of the columns
                'HasDetections':                                        'int8'
               }

fileName = sys.argv[1]
data = pd.read_csv(fileName, dtype=dtypes)
data.replace([np.inf, -np.inf], np.nan)
data = data.drop('MachineIdentifier',axis=1)


categorical = list(data.select_dtypes(include=['object']).columns.values)

print("categorical:",categorical)

labelEncoder = preprocessing.LabelEncoder()
for category in categorical:
    data[category].fillna("NA", inplace=True)
    data[category] = [x.replace('.', '') for x in data[category]]
    data[category] = labelEncoder.fit_transform(data[category].astype(str))

non_categorical = list(data.select_dtypes(include=['float64','float32','float16']).columns.values)


print("non_categorical:",non_categorical)
for nonCat in non_categorical:
    mean_val = np.mean(data[nonCat])
    #median_val = np.median(data[nonCat])
    if(np.isnan(mean_val)):
        mean_val = 0
    #np.around(mean_val, decimals=0)
    mean_val = round(mean_val, 2)
    print("mean_val:",mean_val," - column:",nonCat)
    data[nonCat].fillna(mean_val, inplace=True)


print("has any NAN in data:",np.any(np.isnan(data)))
print("isFinite in data:",np.all(np.isfinite(data)))


y = data.HasDetections
X=data.drop('HasDetections',axis=1)


# Build a forest and compute the feature importances
forest = ExtraTreesClassifier(n_estimators=300,random_state=0)

forest.fit(X, y)
importances = forest.feature_importances_
std = np.std([tree.feature_importances_ for tree in forest.estimators_],axis=0)
indices = np.argsort(importances)

# Plot the feature importances of the forest
plt.figure()
plt.title("Feature importances")
plt.barh(range(X.shape[1]), importances[indices],color="r", xerr=std[indices], align="center")
# If you want to define your own labels,
# change indices to a list of labels on the following line.
#plt.yticks(range(X.shape[1]), indices)
feature_names = X.columns
plt.yticks(range(X.shape[1]), [feature_names[i] for i in indices])
plt.ylim([-1, X.shape[1]])
plt.savefig("malware-featureImportance.png")
plt.show()


