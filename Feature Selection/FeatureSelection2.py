# -*- coding: utf-8 -*-
"""
Created on Wed Feb 13 22:57:15 2019

@author: Unknown_
"""
 
import pandas as pd
import sys
import numpy as np; np.random.seed(4321)
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
import warnings
warnings.filterwarnings("ignore")
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import statsmodels.formula.api as sm

 
data = pd.read_csv(sys.argv[1])

#dropping machine ID column
data = data.drop('MachineIdentifier',axis=1)
#-----------------------------------------------
#cleanup some fields after few CORR run 
data = data.drop('DefaultBrowsersIdentifier',axis=1)
data = data.drop('PuaMode',axis=1)
data = data.drop('Census_IsWIMBootEnabled',axis=1)
data = data.dropna()
label_encoder = LabelEncoder()
data.iloc[:,0] = label_encoder.fit_transform(data.iloc[:,0]).astype('float64')

#---------------------------------------------------------------------
selected_columns = data.iloc[:,:-1].values

import statsmodels.formula.api as sm
def backwardElimination(x, Y, sl, columns):
    numVars = len(x[0])
    for i in range(0, numVars):
        regressor_OLS = sm.OLS(Y, x).fit()
        maxVar = max(regressor_OLS.pvalues).astype(float)
        if maxVar > sl:
            for j in range(0, numVars - i):
                if (regressor_OLS.pvalues[j].astype(float) == maxVar):
                    x = np.delete(x, j, 1)
                    columns = np.delete(columns, j)
                    
    regressor_OLS.summary()
    return x, columns

SL = 0.05
data_modeled, selected_columns = backwardElimination(data.iloc[:,:-1].values, data.iloc[:,0].values, SL, selected_columns)

result = pd.DataFrame()
result['HasDetections'] = data.iloc[:,-1]
data = pd.DataFrame(data = data_modeled, columns = selected_columns)

# visualization
fig = plt.figure(figsize = (20, 25))
j = 0
for i in data.columns:
    plt.subplot(6, 4, j+1)
    j += 1
    sns.distplot(data[i][result['HasDetections']==0], color='blue', label = 'no')
    sns.distplot(data[i][result['HasDetections']==1], color='red', label = 'yes')
    plt.legend(loc='best')
fig.suptitle('Malware Detection Data Analysis')
fig.tight_layout()
fig.subplots_adjust(top=0.95)
plt.show()

