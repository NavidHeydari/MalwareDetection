import warnings
import numpy as np
import pandas as pd
import pickle
import dill
from sklearn.model_selection import train_test_split
from sklearn import tree
from sklearn.metrics import accuracy_score
from sklearn.metrics import auc, roc_curve
import sys 

#Donot modify the method signatures and return dtypes
#you can include additional functions of your choice


class MalwareDetectionModel:
  def __init__(self):
       self.dtypes = {
               'MachineIdentifier':                                     'category', # Not Required in Classification
               'ProductName':                                           'category', # Required in Classification
                'EngineVersion':                                        'category', # Required in Classification
                'AppVersion':                                           'category', # Required in Classification
                'AvSigVersion':                                         'category', # Required in Classification
                'IsBeta':                                               'float64', 
                'RtpStateBitfield':                                     'float64',
                'IsSxsPassiveMode':                                     'float64',
                'DefaultBrowsersIdentifier':                            'float64',
                'AVProductStatesIdentifier':                            'float64',
                'AVProductsInstalled':                                  'float64',
                'AVProductsEnabled':                                    'float64',
                'HasTpm':                                               'float64',
                'CountryIdentifier':                                    'float64',
                'CityIdentifier':                                       'float64',
                'OrganizationIdentifier':                               'float64',
                'GeoNameIdentifier':                                    'float64',
                'LocaleEnglishNameIdentifier':                          'float64',
                'Platform':                                             'category',
                'Processor':                                            'category',
                'OsVer':                                                'category',
                'OsBuild':                                              'float64',
                'OsSuite':                                              'float64',
                'OsPlatformSubRelease':                                 'category',
                'OsBuildLab':                                           'category',
                'SkuEdition':                                           'category',
                'IsProtected':                                          'float64',
                'AutoSampleOptIn':                                      'float64',
                'PuaMode':                                              'category',
                'SMode':                                                'float64',
                'IeVerIdentifier':                                      'float64',
                'SmartScreen':                                          'category',
                'Firewall':                                             'float64',
                'UacLuaenable':                                         'float64',
                'Census_MDC2FormFactor':                                'category',
                'Census_DeviceFamily':                                  'category',
                'Census_OEMNameIdentifier':                             'float64',
                'Census_OEMModelIdentifier':                            'float64',
                'Census_ProcessorCoreCount':                            'float64',
                'Census_ProcessorManufacturerIdentifier':               'float64',
                'Census_ProcessorModelIdentifier':                      'float64',
                'Census_ProcessorClass':                                'category',
                'Census_PrimaryDiskTotalCapacity':                      'float64',
                'Census_PrimaryDiskTypeName':                           'category',
                'Census_SystemVolumeTotalCapacity':                     'float64',
                'Census_HasOpticalDiskDrive':                           'float64',
                'Census_TotalPhysicalRAM':                              'float64',
                'Census_ChassisTypeName':                               'category',
                'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float64',
                'Census_InternalPrimaryDisplayResolutionHorizontal':    'float64',
                'Census_InternalPrimaryDisplayResolutionVertical':      'float64',
                'Census_PowerPlatformRoleName':                         'category',
                'Census_InternalBatteryType':                           'category',
                'Census_InternalBatteryNumberOfCharges':                'float64',
                'Census_OSVersion':                                     'category',
                'Census_OSArchitecture':                                'category',
                'Census_OSBranch':                                      'category',
                'Census_OSBuildNumber':                                 'float64',
                'Census_OSBuildRevision':                               'float64',
                'Census_OSEdition':                                     'category',
                'Census_OSSkuName':                                     'category',
                'Census_OSInstallTypeName':                             'category',
                'Census_OSInstallLanguageIdentifier':                   'float64',
                'Census_OSUILocaleIdentifier':                          'float64',
                'Census_OSWUAutoUpdateOptionsName':                     'category',
                'Census_IsPortableOperatingSystem':                     'float64',
                'Census_GenuineStateName':                              'category',
                'Census_ActivationChannel':                             'category',
                'Census_IsFlightingInternal':                           'float64',
                'Census_IsFlightsDisabled':                             'float64',
                'Census_FlightRing':                                    'category',
                'Census_ThresholdOptIn':                                'float64',
                'Census_FirmwareManufacturerIdentifier':                'float64',
                'Census_FirmwareVersionIdentifier':                     'float64',
                'Census_IsSecureBootEnabled':                           'float64',
                'Census_IsWIMBootEnabled':                              'float64',
                'Census_IsVirtualDevice':                               'float64',
                'Census_IsTouchEnabled':                                'float64',
                'Census_IsPenCapable':                                  'float64',
                'Census_IsAlwaysOnAlwaysConnectedCapable':              'float64',
                'Wdft_IsGamer':                                         'float64',
                'Wdft_RegionIdentifier':                                'float64',
               #fill in the data types for the rest of the columns
                'HasDetections':                                        'int8'
               }
       
       #map categories to numbers
       self.map_to_int_col_2_ProductName = {'win8defender':1, 'mse':2,'fep':3, 'mseprerelease':4, 'scep':5, 'windowsintune':6}
       self.map_to_int_col_3_EngineVersion = {'1.1.10302.0': 1 , '1.1.10401.0': 2, '1.1.10701.0': 3, '1.1.11104.0': 4, 
                                            '1.1.11202.0': 5, '1.1.11400.0':6 , '1.1.11502.0': 7, '1.1.11602.0': 8,
                                            '1.1.11701.0': 9, '1.1.11804.0': 10 , '1.1.11903.0': 11, '1.1.12002.0':12 , 
                                            '1.1.12101.0':13 , '1.1.12205.0':14 , '1.1.12300.0':15 , '1.1.12400.0': 16,
                                            '1.1.12505.0': 17 , '1.1.12603.0':18 , '1.1.12706.0':19 , '1.1.12802.0': 20 , 
                                            '1.1.12804.0': 21 , '1.1.12805.0': 22, '1.1.12902.0':23 , '1.1.13000.0': 24,
                                            '1.1.13102.0': 25, '1.1.13103.0':26 , '1.1.13202.0': 27, '1.1.13301.0':28 , 
                                            '1.1.13303.0':29 , '1.1.13406.0': 30, '1.1.13407.0': 31, '1.1.13503.0': 32, 
                                            '1.1.13504.0': 33, '1.1.13601.0': 34, '1.1.13701.0': 35, '1.1.13704.0':36 ,
                                            '1.1.13802.0':37, '1.1.13803.0': 38, '1.1.13804.0':39 , '1.1.13902.0':40 , 
                                            '1.1.13903.0':41 , '1.1.14001.0':42 , '1.1.14002.0':43 , '1.1.14003.0': 44, 
                                            '1.1.14102.0': 45 , '1.1.14103.0':46 , '1.1.14104.0':47 , '1.1.14201.0':48 ,
                                            '1.1.14202.0': 49, '1.1.14303.0': 50, '1.1.14305.0': 51, '1.1.14306.0':52 , 
                                            '1.1.14405.2':53 , '1.1.14500.2': 54, '1.1.14500.5': 55, '1.1.14600.4': 56, 
                                            '1.1.14700.3': 57, '1.1.14700.4': 58, '1.1.14700.5': 59, '1.1.14800.1': 60, 
                                            '1.1.14800.3': 61, '1.1.14901.3': 62, '1.1.14901.4': 63, '1.1.15000.1': 64, 
                                            '1.1.15000.2': 65, '1.1.15100.1':66 , '1.1.15200.1':67 , '1.1.15300.5':68 , 
                                            '1.1.15300.6':69 , '1.1.9700.0': 70}
       
       #define the model in class level so all the methods can use it.
       self.clf = tree.DecisionTreeClassifier(max_depth=5)


  #trains a model, you can access the malware_train.csv file for training your model
  def train(self):
      fileName = sys.argv[1]

    # TODO clean up the input file in details and analysis of the NAN and empty or similar values
      data = pd.read_csv(fileName, index_col=0, engine='python')
      data = data.dropna(how='all')
      data = data.dropna(subset=['Wdft_RegionIdentifier', 'Census_IsPenCapable','HasDetections'])
      print(data.head())
      print("Number of rows in data [After Data Cleaning]:", data.shape[0])
      #convertng categories/Strings to numbers for classifications
      data['ProductName'] = data['ProductName'].replace(self.map_to_int_col_2_ProductName)
      data['EngineVersion'] = data['EngineVersion'].replace(self.map_to_int_col_3_EngineVersion)
      
      y = data.HasDetections
      # TODO adjust later to replace the categories with proper int or float numbers
#      X = data.drop('HasDetections', axis=1)
           # TODO cleanup the code 
      X = data[['Wdft_RegionIdentifier','Census_IsPenCapable']]
##      X = X.dropna(subset=['Wdft_RegionIdentifier', 'Census_IsPenCapable'])
#      print('X:',X)
#      #print('y:',y)
#      X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)
#      
      self.clf.fit(X, y)
      

  #predicts the probablity of a machine affected by malware. The input test_data is a pandas dataframe.
  #This function must return the predicted probabilities for the test machines
  def predict_probablities(self, test_data):
      #TODO delete this in my development
      test_data= test_data[['Wdft_RegionIdentifier','Census_IsPenCapable']]
      #TODO Adjusting the return type shape
      predictions = self.clf.predict_proba(test_data)[:, 1]
      print(predictions)
      
      return predictions
 

#calls the train function and saves the model_file
#donot modify the contents
if __name__ == "__main__":
    detectionModel = MalwareDetectionModel()
    detectionModel.train()
    filename = 'malwaremodel.pkl'
    f = open(filename, 'wb')
    dill.dump(detectionModel, f)
    f.close()
